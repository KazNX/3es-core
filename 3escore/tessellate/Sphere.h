//
// author: Kazys Stepanas
//
#ifndef TES_CORE_TESSELATE_SPHERE_H
#define TES_CORE_TESSELATE_SPHERE_H

#include <3escore/CoreConfig.h>

#include <3escore/Vector3.h>
#include <3escore/VectorHash.h>

#include <unordered_map>
#include <vector>

namespace tes::sphere
{
/// Vertex hash operator used in sphere tessellation to prevent aliasing.
struct TES_CORE_API SphereVertexHash
{
  /// Single precision vertex hash.
  inline size_t operator()(const Vector3f &v) const { return vhash::hash(v.x(), v.y(), v.z()); }
  /// Double precision vertex hash.
  inline size_t operator()(const Vector3d &v) const
  {
    return vhash::hash(static_cast<float>(v.x()), static_cast<float>(v.y()),
                       static_cast<float>(v.z()));
  }
};

/// Vertex map used during sphere tessellation.
using SphereVertexMap = std::unordered_map<Vector3f, unsigned, SphereVertexHash>;

/// Initialise a unit sphere as an icosahedron.
/// @param vertices Sphere vertices.
/// @param indices Triangle indices
/// @param vertex_map Optional map to populate. Must be provided when using @c subdivide().
void TES_CORE_API initialise(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                             SphereVertexMap *vertex_map = nullptr);

/// Subdivide a unit sphere. Intended for iterative subdivision of a sphere generated by @c
/// initialise().
/// @param vertices Sphere vertices.
/// @param indices Triangle indices.
/// @param vertex_map Vertex hash map for preventing duplicate vertices.
void TES_CORE_API subdivide(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                            SphereVertexMap &vertex_map);

/// Build a sphere using lat long tesselation. This tesselates by creating a series of rings at
/// various latitudes and connects them by a number of longitudal divisions. This can be used to
/// create a hemisphere.
/// @param[out] vertices Populated with the mesh vertices.
/// @param[out] indices Populated with the mesh indices.
/// @param[out] normals Populated with per vertex normals.
/// @param radius The radius of the sphere to build.
/// @param origin The centre of the sphere.
/// @param hemisphere_ring_count Number of rings latitudal rings in each hemisphere. Excludes the
/// equatorial ring.
/// @param segments Number of longitudal segments.
/// @param axis Primary axis for the sphere, which determines the polar regions.
/// @param hemisphere_only True to tesselate a hemisphere only. The hemisphere is built in the
/// direction of the @p axis .
void TES_CORE_API solidLatLong(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                               std::vector<Vector3f> &normals, float radius = 1.0f,
                               const Vector3f &origin = Vector3f(0.0f),
                               unsigned hemisphere_ring_count = 5, unsigned segments = 32,
                               const Vector3f &axis = { 0.0f, 0.0f, 1.0f },
                               bool hemisphere_only = false);

/// Tessellate a sphere using a subdivision technique starting from an icosahedron.
/// @param[out] vertices Populated with the mesh vertices.
/// @param[out] indices Populated with the mesh indices.
/// @param[out] normals Populated with per vertex normals.
/// @param radius The radius of the sphere to build.
/// @param origin The centre of the sphere.
/// @param depth The tessellation recursion depth. Each iteration tessellates each face into four
/// triangles.
void TES_CORE_API solid(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                        std::vector<Vector3f> &normals, float radius = 1.0f,
                        const Vector3f &origin = Vector3f(0.0f), unsigned depth = 2);

/// @overload
/// Does not calculate normals.
void TES_CORE_API solid(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                        float radius = 1.0f, const Vector3f &origin = Vector3f(0.0f),
                        unsigned depth = 2);

/// Generate a line drawn sphere representation, made of three perpendicular rings.
/// @param[out] vertices Populated with the mesh vertices.
/// @param[out] indices Populated with the mesh indices.
/// @param radius The radius of the sphere to build.
/// @param origin The centre of the sphere.
/// @param ring_vertex_count Number of vertices per rings.
void TES_CORE_API wireframe(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                            float radius = 1.0f, const Vector3f &origin = Vector3f(0.0f),
                            unsigned ring_vertex_count = 32u);
}  // namespace tes::sphere

#endif  // TES_CORE_TESSELATE_SPHERE_H
