//
// author: Kazys Stepanas
//
#ifndef _3ESTESSELATESPHERE_H_
#define _3ESTESSELATESPHERE_H_

#include "3es-core.h"

#include "3esvector3.h"
#include "3esvectorhash.h"

#include <unordered_map>
#include <vector>

namespace tes
{
  namespace sphere
  {
    /// Vertex hash operator used in sphere tessellation to prevent aliasing.
    struct _3es_coreAPI SphereVertexHash
    {
      /// Single precision vertex hash.
      inline size_t operator()(const Vector3f &v) const { return vhash::hash(v.x, v.y, v.z); }
      /// Double precision vertex hash.
      inline size_t operator()(const Vector3d &v) const { return vhash::hash(float(v.x), float(v.y), float(v.z)); }
    };

    /// Vertex map used during sphere tessellation.
    using SphereVertexMap = std::unordered_map<Vector3f, unsigned, SphereVertexHash>;

    /// Initialise a unit sphere as an icosahedron.
    /// @param vertices Sphere vertices.
    /// @param indices Triangle indices
    /// @param vertexMap Optional map to populate. Must be provided when using @c subdivide().
    void _3es_coreAPI initialise(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                                 SphereVertexMap *vertexMap = nullptr);

    /// Subdivide a unit sphere. Intended for iterative subdivision of a sphere generated by @c initialise().
    /// @param vertices Sphere vertices.
    /// @param indices Triangle indices.
    /// @param vertexMap Vertex hash map for preventing duplicate vertices.
    void _3es_coreAPI subdivide(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices, SphereVertexMap &vertexMap);

    /// Tessellate a sphere using a subdivision technique starting from an icosahedron.
    /// @param[out] vertices Populated with the mesh vertices.
    /// @param[out] indices Populated with the mesh indices.
    /// @param[out] normals Populated with per vertex normals.
    /// @param radius The radius of the sphere to build.
    /// @param origin The centre of the sphere.
    /// @param depth The tessellation recursion depth. Each iteration tessellates each face into four triangles.
    void _3es_coreAPI solid(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                            std::vector<Vector3f> &normals, float radius = 1.0f,
                            const Vector3f &origin = Vector3f(0.0f), int depth = 2);

    /// @overload
    /// Does not calculate normals.
    void _3es_coreAPI solid(std::vector<Vector3f> &vertices, std::vector<unsigned> &indices,
                            float radius = 1.0f, const Vector3f &origin = Vector3f(0.0f), int depth = 2);
  }
}

#endif // _3ESTESSELATESPHERE_H_
